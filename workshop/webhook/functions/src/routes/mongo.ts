import express, { Request, Response } from 'express'
import { LineEvent, Message } from '@/types/webhook'
import {
  reply,
  getContent,
  getExtension,
  getProfileByGroup,
  getProfileCache,
  isAnimationLoading,
  richmenuSetIndividual,
} from '@/utils/line'
import { saveImageToStorage } from '@/utils/firebase'
import {
  saveLineProfileToMongoDB,
  saveImageMetadataToMongoDB,
  upsertRegister,
  getMemberByUserId,
} from '@/utils/mongo'
import { welcomeRegister } from '@/messages/message'
import { Member } from '@/types/mongo'

const router = express.Router()

// =========================
// MongoDB Route
//=========================

router.post('/', async (request: Request, response: Response) => {
  /*
    Step 1: Extract events from request
    Step 2: Validate events array
    Step 3: Loop through events
      - ‡∏ñ‡πâ‡∏≤ event ‡πÄ‡∏õ‡πá‡∏ô message: ‡∏î‡∏∂‡∏á profile, save profile ‡∏•‡∏á MongoDB, ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleMessage
    Step 4: End the response
  */

  const events: LineEvent[] = request.body.events

  if (!Array.isArray(events)) {
    console.error("Invalid payload: 'events' is not an array", request.body)
    response.status(400).send('Invalid payload')
    return
  }

  for (const event of events) {
    if (event.type === 'message' && event.message) {
      const profile = await getProfileByGroup(event.source.groupId!, event.source.userId!)
      await saveLineProfileToMongoDB(profile)

      handleMessage(event.message, event.replyToken!, event.source.groupId!)
    }
  }

  response.end()
})

async function handleMessage(message: Message, replyToken: string, groupId: string): Promise<void> {
  /*
    Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á message
      - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô image, video, audio, file:
        - ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
        - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô text ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠ 'save':
        - ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å quote
        - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á storage
        - save metadata ‡∏•‡∏á MongoDB
        - ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö URL ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    Step 2: ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ log warning
  */

  switch (message.type) {
    case 'image':
    case 'video':
    case 'audio':
    case 'file':
      console.log('üñºÔ∏è Received Image Message with ID:', message.id)
      const buffer = await getContent(message.id)
      const extension = getExtension(message.fileName!, message.type!)

      console.log(`üì¶ Content size: ${buffer.length} bytes`)
      console.log(`üì¶ Extension: ${extension} bytes`)

      if (message.imageSet) {
        message.id = message.id + '_' + message.imageSet.id.toString()
      }

      await reply(replyToken, [
        {
          type: 'text',
          text: `‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå ${message.type} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏ô‡∏≤‡∏î: ${buffer.length} bytes \n ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${extension} \n ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "save" ‡∏î‡πâ‡∏ß‡∏¢ reply ‡∏£‡∏π‡∏õ`,
          quoteToken: `${message.quoteToken}`,
        },
      ])

      break

    default:
      if (message.type === 'text' && message.text === 'save') {
        let id = message.quotedMessageId || message.id

        const buffer = await getContent(id)
        const extension = getExtension(message.fileName!, message.type!)
        const publicUrl = await saveImageToStorage(groupId, id, buffer, extension)
        console.log(`üì¶ Public URL: ${publicUrl}`)
        console.log(`üì¶ Content size: ${buffer.length} bytes`)
        console.log(`üì¶ Extension: ${extension} bytes`)
        console.log({
          groupId,
          messageId: id,
          type: message.type,
          size: buffer.length,
          timestamp: getCurrentDateTimeString(),
          url: publicUrl,
        })
        //* step uncomment*/
         await saveImageMetadataToMongoDB({
           groupId,
           messageId: id,
           type: message.type,
           size: buffer.length,
           timestamp: getCurrentDateTimeString(),
           url: publicUrl,
         })

        // * step uncomment*/
         await reply(replyToken, [
           {
             type: 'text',
             text: `‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå ${message.type} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏ô‡∏≤‡∏î: ${buffer.length} bytes \n ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${extension} \n ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${publicUrl}`,
             quoteToken: `${message.quoteToken}`,
           },
         ])
      }

      break
  }
}

function getCurrentDateTimeString(): string {
  const now = new Date()
  const day = String(now.getDate()).padStart(2, '0')
  const month = String(now.getMonth() + 1).padStart(2, '0')
  const year = now.getFullYear()

  const hours = String(now.getHours()).padStart(2, '0')
  const minutes = String(now.getMinutes()).padStart(2, '0')

  return `${year}-${month}-${day} ${hours}:${minutes}`
}

/* [POST] /mongo/authen
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ flow ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
- ‡∏ñ‡πâ‡∏≤ event ‡∏°‡∏≤‡∏à‡∏≤‡∏Å user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà group ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô animation loading
- ‡∏ñ‡πâ‡∏≤ event ‡πÄ‡∏õ‡πá‡∏ô follow: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
- ‡∏ñ‡πâ‡∏≤ event ‡πÄ‡∏õ‡πá‡∏ô message (type=text):
  - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB):
    - ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" ‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
    - ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 0xxxxxxxxx) ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô, set richmenu, ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  - ‡∏ñ‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "logout" ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Inactive, set richmenu guest
- ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏à‡∏∞ log warning
*/
router.post('/authen', async (request: Request, response: Response) => {
  const events: LineEvent[] = request.body.events

  if (!Array.isArray(events)) {
    console.error("Invalid payload: 'events' is not an array", request.body)
    response.status(400).send('Invalid payload')
    return
  }

  for (const event of events) {
    if (event.source.type !== 'group') {
      await isAnimationLoading(event.source.userId!)
    }

    if (event.type === 'follow') {
      const profile = await getProfileCache(event.source.userId!)
      await reply(event.replyToken!, [welcomeRegister(profile.displayName)])
    }
    if (event.type === 'message' && event.message) {
      switch (event.message.type) {
        case 'text':
          const memberProfile = await getMemberByUserId(event.source.userId!)
          if (!memberProfile) {
            const profile = await getProfileCache(event.source.userId!)
            if (event.message.text === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô') {
              await reply(event.replyToken!, [
                {
                  type: 'text',
                  text:
                    '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ' +
                    profile.displayName +
                    ' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ \n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 0812345678',
                },
              ])
              break
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const phone = event.message.text?.trim()
            const isPhoneNumber = /^0\d{9}$/.test(phone!)

            console.log('phone: ', phone)
            console.log('isPhoneNumber: ', isPhoneNumber)

            if (isPhoneNumber) {
              // Noted: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
              // TODO: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              // Homework

              const richmenu = process.env.RICH_MENU_MEMBER_ID

              let profileRegister = {
                ...profile,
                phoneNumber: phone,
                status: 'Active',
                richmenu: richmenu,
                createdAt: new Date(),
              } as Member

              await upsertRegister(profileRegister)
              await richmenuSetIndividual(event.source.userId!, richmenu!)

              await reply(event.replyToken!, [
                {
                  type: 'text',
                  text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${profile.displayName}`,
                },
              ])
            }
            break
          } else {
            if (event.message.text === 'logout') {
              const richmenu = process.env.RICH_MENU_GUEST_ID
              const memberProfile = await getMemberByUserId(event.source.userId!)
              let profileRegister = {
                ...memberProfile,
                status: 'Inactive',
                richmenu: richmenu,
                updatedAt: new Date(),
              } as Member

              await upsertRegister(profileRegister)
              await richmenuSetIndividual(event.source.userId!, richmenu!)
            }
          }

          break

        default:
          console.warn('‚ö†Ô∏è Unhandled message type:', event.message.type)

          break
      }
    }
  }

  response.end()
})

export default router
